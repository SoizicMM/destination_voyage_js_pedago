////////////////////////////////////
//// ‚úçÔ∏è Effet machine √† √©crire ////
///////////////////////////////////
const texteSlogan = "Destination CocoBeach üå¥"; // Le texte √† afficher progressivement
let indexLettre = 0; // Index de la lettre actuelle (commence √† 0)

// Fonction principale : √©crit le texte lettre par lettre
function ecrireMachine() {
  if (indexLettre < texteSlogan.length) { // Tant qu'on n'a pas atteint la fin du texte
    // S√©lectionne l'√©l√©ment HTML avec l'id "slogan"
    // et ajoute la lettre correspondante √† l'index actuel
    document.getElementById("slogan").textContent += texteSlogan.charAt(indexLettre);
    indexLettre++; // Passe √† la lettre suivante
    // Relance la fonction apr√®s 100 millisecondes
    // ‚Üí cr√©e l'effet de frappe progressive
    setTimeout(ecrireMachine, 100);
  }
}

// D√©marre l'effet d√®s l'ouverture de la page
ecrireMachine();



/////////////////////////////
// üåì Mode sombre / clair //
////////////////////////////
// üåô Fonction pour basculer entre le mode clair et le mode sombre
function basculerMode() {
  // Ajoute ou retire la classe "mode-sombre" sur l‚Äô√©l√©ment <body>
  // ‚Üí Si la classe n‚Äôest pas pr√©sente, elle est ajout√©e (active le mode sombre)
  // ‚Üí Si elle est d√©j√† pr√©sente, elle est retir√©e (revient au mode clair)
  document.body.classList.toggle("mode-sombre");
}



///////////////////////////////////
// üîç Zoom au survol de l‚Äôimage //
///////////////////////////////////
// S√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "image-plage"
const imagePlage = document.getElementById("image-plage");

// Quand la souris entre sur l‚Äôimage...
imagePlage.addEventListener("mouseenter", () => {
  // ...on applique une transformation CSS pour agrandir l‚Äôimage (zoom √† 150%)
  imagePlage.style.transform = "scale(1.5)";
});

// Quand la souris quitte l‚Äôimage...
imagePlage.addEventListener("mouseleave", () => {
  // ...on remet la taille d‚Äôorigine (zoom normal)
  imagePlage.style.transform = "scale(1)";
});



//////////////////////////////////////
// Apparition avec fade / slide //
//////////////////////////////////////
// S√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "section-accueil"
const sectionAccueil = document.getElementById("section-accueil");

// Ajoute un √©couteur d‚Äô√©v√©nement sur le d√©filement (scroll) de la fen√™tre
window.addEventListener("scroll", () => {

  // R√©cup√®re la position de la section par rapport √† la fen√™tre
  const position = sectionAccueil.getBoundingClientRect();

  // Si le haut de la section est √† moins de 100px du bas de la fen√™tre visible,
  // on consid√®re qu‚Äôelle entre dans le champ de vision
  if (position.top < window.innerHeight - 100) {

    // Ajoute la classe "visible" √† la section pour d√©clencher une animation CSS
    sectionAccueil.classList.add("visible");
  }
});



/////////////////////////////////
// Animation pomme en rotation //
/////////////////////////////////
// S√©lectionne l‚Äô√©l√©ment HTML dont l‚Äôid est "pomme"
const pomme = document.getElementById("pomme");

// Initialise l‚Äôangle de rotation √† 0 degr√©
let angleRotation = 0;

// D√©finit la direction de rotation (1 = sens horaire, -1 = sens antihoraire)
let direction = 1;

// Cr√©e une boucle qui s‚Äôex√©cute toutes les 50 millisecondes
setInterval(() => {
  // Incr√©mente ou d√©cr√©mente l‚Äôangle de rotation selon la direction actuelle
  angleRotation += direction * 0.5;
  // Si la rotation d√©passe +5¬∞ ou -5¬∞, on inverse la direction
  if (angleRotation > 15 || angleRotation < -15) {
    direction *= -1;
  }
  // Applique la rotation calcul√©e √† l‚Äô√©l√©ment "pomme" en CSS
  pomme.style.transform = `rotate(${angleRotation}deg)`;
}, 30);




